// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

namespace Aplikacija.Migrations
{
    [DbContext(typeof(AplikacijaContext))]
    [Migration("20220710173347_v10")]
    partial class v10
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.Administrator", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Administratori");
                });

            modelBuilder.Entity("Models.Greska", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("VoznjaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("VoznjaID");

                    b.ToTable("Greske");
                });

            modelBuilder.Entity("Models.Karta", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cena")
                        .HasColumnType("float");

                    b.Property<int?>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<int?>("VoznjaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("KorisnikID");

                    b.HasIndex("VoznjaID");

                    b.ToTable("Karte");
                });

            modelBuilder.Entity("Models.Korisnik", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ban")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DatumBanovanja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Korisnici");
                });

            modelBuilder.Entity("Models.Prevoznik", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Prevoznici");
                });

            modelBuilder.Entity("Models.RecenzijaPrevoznika", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AutorID")
                        .HasColumnType("int");

                    b.Property<int?>("PrevoznikID")
                        .HasColumnType("int");

                    b.Property<string>("Sadrzaj")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AutorID");

                    b.HasIndex("PrevoznikID");

                    b.ToTable("RecenzijePrevoznika");
                });

            modelBuilder.Entity("Models.RecenzijaStanice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AutorID")
                        .HasColumnType("int");

                    b.Property<string>("Sadrzaj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StanicaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AutorID");

                    b.HasIndex("StanicaID");

                    b.ToTable("RecenzijeStanice");
                });

            modelBuilder.Entity("Models.Stanica", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Mesto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VoznjaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("VoznjaID");

                    b.ToTable("Stanice");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ban")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Models.Voznja", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("KrajnaStanicaID")
                        .HasColumnType("int");

                    b.Property<int?>("PocetnaStanicaID")
                        .HasColumnType("int");

                    b.Property<int?>("PrevoznikID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Stize")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Termin")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("KrajnaStanicaID");

                    b.HasIndex("PocetnaStanicaID");

                    b.HasIndex("PrevoznikID");

                    b.ToTable("Voznje");
                });

            modelBuilder.Entity("Models.Zahtev", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ListaVoznjiID")
                        .HasColumnType("int");

                    b.Property<int?>("PrevoznikID")
                        .HasColumnType("int");

                    b.Property<string>("UsernamePrevoznik")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ListaVoznjiID");

                    b.HasIndex("PrevoznikID");

                    b.ToTable("Zahtevi");
                });

            modelBuilder.Entity("Models.Greska", b =>
                {
                    b.HasOne("Models.Voznja", "Voznja")
                        .WithMany()
                        .HasForeignKey("VoznjaID");

                    b.Navigation("Voznja");
                });

            modelBuilder.Entity("Models.Karta", b =>
                {
                    b.HasOne("Models.Korisnik", null)
                        .WithMany("kupljeneKarte")
                        .HasForeignKey("KorisnikID");

                    b.HasOne("Models.Voznja", "Voznja")
                        .WithMany()
                        .HasForeignKey("VoznjaID");

                    b.Navigation("Voznja");
                });

            modelBuilder.Entity("Models.RecenzijaPrevoznika", b =>
                {
                    b.HasOne("Models.Korisnik", "Autor")
                        .WithMany("recenzijePrevoznika")
                        .HasForeignKey("AutorID");

                    b.HasOne("Models.Prevoznik", "Prevoznik")
                        .WithMany()
                        .HasForeignKey("PrevoznikID");

                    b.Navigation("Autor");

                    b.Navigation("Prevoznik");
                });

            modelBuilder.Entity("Models.RecenzijaStanice", b =>
                {
                    b.HasOne("Models.Korisnik", "Autor")
                        .WithMany("recenzijeStanice")
                        .HasForeignKey("AutorID");

                    b.HasOne("Models.Stanica", "Stanica")
                        .WithMany()
                        .HasForeignKey("StanicaID");

                    b.Navigation("Autor");

                    b.Navigation("Stanica");
                });

            modelBuilder.Entity("Models.Stanica", b =>
                {
                    b.HasOne("Models.Voznja", null)
                        .WithMany("Medjustanice")
                        .HasForeignKey("VoznjaID");
                });

            modelBuilder.Entity("Models.Voznja", b =>
                {
                    b.HasOne("Models.Stanica", "KrajnaStanica")
                        .WithMany()
                        .HasForeignKey("KrajnaStanicaID");

                    b.HasOne("Models.Stanica", "PocetnaStanica")
                        .WithMany()
                        .HasForeignKey("PocetnaStanicaID");

                    b.HasOne("Models.Prevoznik", "Prevoznik")
                        .WithMany()
                        .HasForeignKey("PrevoznikID");

                    b.Navigation("KrajnaStanica");

                    b.Navigation("PocetnaStanica");

                    b.Navigation("Prevoznik");
                });

            modelBuilder.Entity("Models.Zahtev", b =>
                {
                    b.HasOne("Models.Voznja", "ListaVoznji")
                        .WithMany()
                        .HasForeignKey("ListaVoznjiID");

                    b.HasOne("Models.Prevoznik", "Prevoznik")
                        .WithMany("Zahtevi")
                        .HasForeignKey("PrevoznikID");

                    b.Navigation("ListaVoznji");

                    b.Navigation("Prevoznik");
                });

            modelBuilder.Entity("Models.Korisnik", b =>
                {
                    b.Navigation("kupljeneKarte");

                    b.Navigation("recenzijePrevoznika");

                    b.Navigation("recenzijeStanice");
                });

            modelBuilder.Entity("Models.Prevoznik", b =>
                {
                    b.Navigation("Zahtevi");
                });

            modelBuilder.Entity("Models.Voznja", b =>
                {
                    b.Navigation("Medjustanice");
                });
#pragma warning restore 612, 618
        }
    }
}
