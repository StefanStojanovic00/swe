// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

namespace Aplikacija.Migrations
{
    [DbContext(typeof(AplikacijaContext))]
    [Migration("20220413154141_v2.2")]
    partial class v22
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.Administrator", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Administratori");
                });

            modelBuilder.Entity("Models.Greska", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LinijaID")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("StanicaID")
                        .HasColumnType("int");

                    b.Property<int?>("UslugaID")
                        .HasColumnType("int");

                    b.Property<int?>("VozID")
                        .HasColumnType("int");

                    b.Property<int?>("VoznjaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LinijaID");

                    b.HasIndex("StanicaID");

                    b.HasIndex("UslugaID");

                    b.HasIndex("VozID");

                    b.HasIndex("VoznjaID");

                    b.ToTable("Greske");
                });

            modelBuilder.Entity("Models.Karta", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<double>("Cena")
                        .HasColumnType("float");

                    b.Property<int?>("KorisnikID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("KorisnikID");

                    b.ToTable("Karte");
                });

            modelBuilder.Entity("Models.Korisnik", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ban")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Korisnici");
                });

            modelBuilder.Entity("Models.Linija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("StanciaDoID")
                        .HasColumnType("int");

                    b.Property<int?>("StanicaOdID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StanciaDoID");

                    b.HasIndex("StanicaOdID");

                    b.ToTable("Linije");
                });

            modelBuilder.Entity("Models.Mesto", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Mesta");
                });

            modelBuilder.Entity("Models.Proizvodjac", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Proizvodjaci");
                });

            modelBuilder.Entity("Models.Recenzija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AutorID")
                        .HasColumnType("int");

                    b.Property<int>("BrojDislike")
                        .HasColumnType("int");

                    b.Property<int>("BrojLike")
                        .HasColumnType("int");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("StanicaID")
                        .HasColumnType("int");

                    b.Property<int?>("UslugaID")
                        .HasColumnType("int");

                    b.Property<int?>("VozID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AutorID");

                    b.HasIndex("StanicaID");

                    b.HasIndex("UslugaID");

                    b.HasIndex("VozID");

                    b.ToTable("Recenzije");
                });

            modelBuilder.Entity("Models.Stanica", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LinijaID")
                        .HasColumnType("int");

                    b.Property<int?>("MestoID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LinijaID");

                    b.HasIndex("MestoID");

                    b.ToTable("Stanice");
                });

            modelBuilder.Entity("Models.Usluga", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StanicaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StanicaID");

                    b.ToTable("Usluge");
                });

            modelBuilder.Entity("Models.Voz", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProizvodjacID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProizvodjacID");

                    b.ToTable("Vozovi");
                });

            modelBuilder.Entity("Models.Voznja", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdministratorID")
                        .HasColumnType("int");

                    b.Property<int?>("StanicaDoID")
                        .HasColumnType("int");

                    b.Property<int?>("StanicaOdID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Termin")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VozID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AdministratorID");

                    b.HasIndex("StanicaDoID");

                    b.HasIndex("StanicaOdID");

                    b.HasIndex("VozID");

                    b.ToTable("Voznje");
                });

            modelBuilder.Entity("Models.Greska", b =>
                {
                    b.HasOne("Models.Linija", null)
                        .WithMany("Greske")
                        .HasForeignKey("LinijaID");

                    b.HasOne("Models.Stanica", null)
                        .WithMany("Greske")
                        .HasForeignKey("StanicaID");

                    b.HasOne("Models.Usluga", null)
                        .WithMany("Greske")
                        .HasForeignKey("UslugaID");

                    b.HasOne("Models.Voz", null)
                        .WithMany("Greske")
                        .HasForeignKey("VozID");

                    b.HasOne("Models.Voznja", null)
                        .WithMany("Greske")
                        .HasForeignKey("VoznjaID");
                });

            modelBuilder.Entity("Models.Karta", b =>
                {
                    b.HasOne("Models.Voznja", "Voznja")
                        .WithOne("Karta")
                        .HasForeignKey("Models.Karta", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Korisnik", null)
                        .WithMany("Karte")
                        .HasForeignKey("KorisnikID");

                    b.Navigation("Voznja");
                });

            modelBuilder.Entity("Models.Linija", b =>
                {
                    b.HasOne("Models.Stanica", "StanciaDo")
                        .WithMany()
                        .HasForeignKey("StanciaDoID");

                    b.HasOne("Models.Stanica", "StanicaOd")
                        .WithMany()
                        .HasForeignKey("StanicaOdID");

                    b.Navigation("StanciaDo");

                    b.Navigation("StanicaOd");
                });

            modelBuilder.Entity("Models.Recenzija", b =>
                {
                    b.HasOne("Models.Korisnik", "Autor")
                        .WithMany()
                        .HasForeignKey("AutorID");

                    b.HasOne("Models.Stanica", null)
                        .WithMany("Recenzije")
                        .HasForeignKey("StanicaID");

                    b.HasOne("Models.Usluga", null)
                        .WithMany("Recenzije")
                        .HasForeignKey("UslugaID");

                    b.HasOne("Models.Voz", null)
                        .WithMany("Recenzije")
                        .HasForeignKey("VozID");

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("Models.Stanica", b =>
                {
                    b.HasOne("Models.Linija", null)
                        .WithMany("StaniceNaLiniji")
                        .HasForeignKey("LinijaID");

                    b.HasOne("Models.Mesto", "Mesto")
                        .WithMany()
                        .HasForeignKey("MestoID");

                    b.Navigation("Mesto");
                });

            modelBuilder.Entity("Models.Usluga", b =>
                {
                    b.HasOne("Models.Stanica", "Stanica")
                        .WithMany("Usluge")
                        .HasForeignKey("StanicaID");

                    b.Navigation("Stanica");
                });

            modelBuilder.Entity("Models.Voz", b =>
                {
                    b.HasOne("Models.Proizvodjac", "Proizvodjac")
                        .WithMany()
                        .HasForeignKey("ProizvodjacID");

                    b.Navigation("Proizvodjac");
                });

            modelBuilder.Entity("Models.Voznja", b =>
                {
                    b.HasOne("Models.Administrator", "Administrator")
                        .WithMany()
                        .HasForeignKey("AdministratorID");

                    b.HasOne("Models.Stanica", "StanicaDo")
                        .WithMany("Voznje")
                        .HasForeignKey("StanicaDoID");

                    b.HasOne("Models.Stanica", "StanicaOd")
                        .WithMany()
                        .HasForeignKey("StanicaOdID");

                    b.HasOne("Models.Voz", "Voz")
                        .WithMany()
                        .HasForeignKey("VozID");

                    b.Navigation("Administrator");

                    b.Navigation("StanicaDo");

                    b.Navigation("StanicaOd");

                    b.Navigation("Voz");
                });

            modelBuilder.Entity("Models.Korisnik", b =>
                {
                    b.Navigation("Karte");
                });

            modelBuilder.Entity("Models.Linija", b =>
                {
                    b.Navigation("Greske");

                    b.Navigation("StaniceNaLiniji");
                });

            modelBuilder.Entity("Models.Stanica", b =>
                {
                    b.Navigation("Greske");

                    b.Navigation("Recenzije");

                    b.Navigation("Usluge");

                    b.Navigation("Voznje");
                });

            modelBuilder.Entity("Models.Usluga", b =>
                {
                    b.Navigation("Greske");

                    b.Navigation("Recenzije");
                });

            modelBuilder.Entity("Models.Voz", b =>
                {
                    b.Navigation("Greske");

                    b.Navigation("Recenzije");
                });

            modelBuilder.Entity("Models.Voznja", b =>
                {
                    b.Navigation("Greske");

                    b.Navigation("Karta");
                });
#pragma warning restore 612, 618
        }
    }
}
